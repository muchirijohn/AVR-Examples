
analog-basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  000001aa  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008001a2  008001a2  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f5  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b4  00000000  00000000  00000a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002de  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000280  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea ea       	ldi	r30, 0xAA	; 170
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 3a       	cpi	r26, 0xA2	; 162
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 ea       	ldi	r26, 0xA2	; 162
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 3a       	cpi	r26, 0xA4	; 164
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	9c d0       	rcall	.+312    	; 0x1a0 <main>
  68:	9e c0       	rjmp	.+316    	; 0x1a6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <pinSet.part.0>:
      sets PORTB5 - B5  as output.                                                                      
************************************************************************/
static inline void pinSet(uint8_t pin, uint8_t mode) {
	if (pin < pins) {
		if (mode) {
			*pins_def[pin].DDRx |=  _BV(pins_def[pin].bit);
  6c:	97 e0       	ldi	r25, 0x07	; 7
  6e:	89 9f       	mul	r24, r25
  70:	f0 01       	movw	r30, r0
  72:	11 24       	eor	r1, r1
  74:	e0 50       	subi	r30, 0x00	; 0
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	a0 81       	ld	r26, Z
  7a:	b1 81       	ldd	r27, Z+1	; 0x01
  7c:	2c 91       	ld	r18, X
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	06 80       	ldd	r0, Z+6	; 0x06
  84:	02 c0       	rjmp	.+4      	; 0x8a <pinSet.part.0+0x1e>
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <pinSet.part.0+0x1a>
  8e:	28 2b       	or	r18, r24
  90:	2c 93       	st	X, r18
  92:	08 95       	ret

00000094 <pinWrite.part.1>:
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
  94:	97 e0       	ldi	r25, 0x07	; 7
  96:	89 9f       	mul	r24, r25
  98:	f0 01       	movw	r30, r0
  9a:	11 24       	eor	r1, r1
  9c:	e0 50       	subi	r30, 0x00	; 0
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	a2 81       	ldd	r26, Z+2	; 0x02
  a2:	b3 81       	ldd	r27, Z+3	; 0x03
  a4:	2c 91       	ld	r18, X
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	06 80       	ldd	r0, Z+6	; 0x06
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <pinWrite.part.1+0x1e>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <pinWrite.part.1+0x1a>
  b6:	28 2b       	or	r18, r24
  b8:	2c 93       	st	X, r18
  ba:	08 95       	ret

000000bc <pinWrite>:
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
  bc:	87 31       	cpi	r24, 0x17	; 23
  be:	b0 f4       	brcc	.+44     	; 0xec <pinWrite+0x30>
		if (value) {
  c0:	61 11       	cpse	r22, r1
  c2:	e8 cf       	rjmp	.-48     	; 0x94 <pinWrite.part.1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	89 9f       	mul	r24, r25
  c8:	f0 01       	movw	r30, r0
  ca:	11 24       	eor	r1, r1
  cc:	e0 50       	subi	r30, 0x00	; 0
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	a2 81       	ldd	r26, Z+2	; 0x02
  d2:	b3 81       	ldd	r27, Z+3	; 0x03
  d4:	2c 91       	ld	r18, X
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	06 80       	ldd	r0, Z+6	; 0x06
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <pinWrite+0x26>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <pinWrite+0x22>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	8c 93       	st	X, r24
  ec:	08 95       	ret

000000ee <adc_init>:
#define adc_min 0
/************************************************************************
* initialize adc                                                       
************************************************************************/
void adc_init(){
	ADMUX = ADC0;
  ee:	10 92 7c 00 	sts	0x007C, r1
	//ADCSRA = 0xC3;
	ADCSRA |= ((1<<ADEN) | (1<<ADSC) | (1<<ADPS1) | (1<<ADPS0));
  f2:	80 91 7a 00 	lds	r24, 0x007A
  f6:	83 6c       	ori	r24, 0xC3	; 195
  f8:	80 93 7a 00 	sts	0x007A, r24
	while (!(ADCSRA & (1<<ADIF)));
  fc:	80 91 7a 00 	lds	r24, 0x007A
 100:	84 ff       	sbrs	r24, 4
 102:	fc cf       	rjmp	.-8      	; 0xfc <adc_init+0xe>
	ADCSRA |= (1<<ADIF);
 104:	80 91 7a 00 	lds	r24, 0x007A
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	80 93 7a 00 	sts	0x007A, r24
 10e:	08 95       	ret

00000110 <adc_read_16bit>:
/************************************************************************
* read channel and return 8 bit value
* Channel- adc channel to be read
************************************************************************/
uint16_t adc_read_16bit(uint8_t channel){
	ADMUX = channel;
 110:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= ((1<<ADSC) | (1<<ADPS1) | (1<<ADPS0));
 114:	80 91 7a 00 	lds	r24, 0x007A
 118:	83 64       	ori	r24, 0x43	; 67
 11a:	80 93 7a 00 	sts	0x007A, r24
	while (!(ADCSRA & (1<<ADIF)));
 11e:	80 91 7a 00 	lds	r24, 0x007A
 122:	84 ff       	sbrs	r24, 4
 124:	fc cf       	rjmp	.-8      	; 0x11e <adc_read_16bit+0xe>
	ADCSRA |= (1<<ADIF);
 126:	80 91 7a 00 	lds	r24, 0x007A
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	80 93 7a 00 	sts	0x007A, r24
	return ADC;
 130:	80 91 78 00 	lds	r24, 0x0078
 134:	90 91 79 00 	lds	r25, 0x0079
}
 138:	08 95       	ret

0000013a <init_code>:
uint16_t adc_value = 0;

void init_code()
{
	/*initialize led*/
	adc_init();
 13a:	d9 df       	rcall	.-78     	; 0xee <adc_init>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	96 df       	rcall	.-212    	; 0x6c <pinSet.part.0>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	94 df       	rcall	.-216    	; 0x6c <pinSet.part.0>
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	92 cf       	rjmp	.-220    	; 0x6c <pinSet.part.0>

00000148 <main_code>:
}

void main_code()
{
	/*read adc value from ADC0 (0 - 1023)*/
	adc_value  = adc_read_16bit(ADC1);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	e2 df       	rcall	.-60     	; 0x110 <adc_read_16bit>
 14c:	90 93 a3 01 	sts	0x01A3, r25
 150:	80 93 a2 01 	sts	0x01A2, r24
	
	/*check read value and activate leds*/
	if(adc_value >=0 && adc_value < 256)
 154:	8f 3f       	cpi	r24, 0xFF	; 255
 156:	91 05       	cpc	r25, r1
 158:	09 f0       	breq	.+2      	; 0x15c <main_code+0x14>
 15a:	20 f4       	brcc	.+8      	; 0x164 <main_code+0x1c>
	{
		pinWrite(D0, LOW);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	ad df       	rcall	.-166    	; 0xbc <pinWrite>
 162:	07 c0       	rjmp	.+14     	; 0x172 <main_code+0x2a>
		pinWrite(D1, LOW);
		pinWrite(D2, LOW);
	}
		
	else if(adc_value >=256 && adc_value <=512)
 164:	9c 01       	movw	r18, r24
 166:	3a 95       	dec	r19
 168:	21 30       	cpi	r18, 0x01	; 1
 16a:	31 40       	sbci	r19, 0x01	; 1
 16c:	40 f4       	brcc	.+16     	; 0x17e <main_code+0x36>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	91 df       	rcall	.-222    	; 0x94 <pinWrite.part.1>
	{
		pinWrite(D0, HIGH); 
		pinWrite(D1, LOW);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	a2 df       	rcall	.-188    	; 0xbc <pinWrite>
		pinWrite(D2, LOW);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	9f cf       	rjmp	.-194    	; 0xbc <pinWrite>
	}
	else if(adc_value > 512 && adc_value <=768)
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	92 40       	sbci	r25, 0x02	; 2
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	91 05       	cpc	r25, r1
 186:	09 f0       	breq	.+2      	; 0x18a <main_code+0x42>
 188:	28 f4       	brcc	.+10     	; 0x194 <main_code+0x4c>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	83 df       	rcall	.-250    	; 0x94 <pinWrite.part.1>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	81 df       	rcall	.-254    	; 0x94 <pinWrite.part.1>
 192:	f2 cf       	rjmp	.-28     	; 0x178 <main_code+0x30>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	7e df       	rcall	.-260    	; 0x94 <pinWrite.part.1>
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	7c df       	rcall	.-264    	; 0x94 <pinWrite.part.1>
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	7a cf       	rjmp	.-268    	; 0x94 <pinWrite.part.1>

000001a0 <main>:
 *  Author: Muchiri Mercy
 */ 
#include "sketch.h"
int main(void)
{
	init_code();
 1a0:	cc df       	rcall	.-104    	; 0x13a <init_code>
	while(1)
	{
		main_code();
 1a2:	d2 df       	rcall	.-92     	; 0x148 <main_code>
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <main+0x2>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
