
analog-basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008001a2  008001a2  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c40  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fd  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000361  00000000  00000000  000017e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f4  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b3  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000022a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ea       	ldi	r30, 0xA4	; 164
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 3a       	cpi	r26, 0xA2	; 162
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 ea       	ldi	r26, 0xA2	; 162
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 3a       	cpi	r26, 0xA4	; 164
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	70 d0       	rcall	.+224    	; 0x148 <main>
  68:	9b c0       	rjmp	.+310    	; 0x1a0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <pinSet.part.0>:
	uint16_t adc_val;
	if(!value) adc_val = (adc_read_8bit(channel) << 8);
	else adc_val = adc_read_16bit(channel);
	float val = (max/adc_max) * adc_val;
	return(uint8_t)val;
}
  6c:	27 e0       	ldi	r18, 0x07	; 7
  6e:	82 9f       	mul	r24, r18
  70:	c0 01       	movw	r24, r0
  72:	11 24       	eor	r1, r1
  74:	fc 01       	movw	r30, r24
  76:	e0 50       	subi	r30, 0x00	; 0
  78:	ff 4f       	sbci	r31, 0xFF	; 255
  7a:	a0 81       	ld	r26, Z
  7c:	b1 81       	ldd	r27, Z+1	; 0x01
  7e:	2c 91       	ld	r18, X
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	06 80       	ldd	r0, Z+6	; 0x06
  86:	02 c0       	rjmp	.+4      	; 0x8c <pinSet.part.0+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <pinSet.part.0+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8c 93       	st	X, r24
  94:	08 95       	ret

00000096 <pinWrite.part.1>:
  96:	27 e0       	ldi	r18, 0x07	; 7
  98:	82 9f       	mul	r24, r18
  9a:	c0 01       	movw	r24, r0
  9c:	11 24       	eor	r1, r1
  9e:	fc 01       	movw	r30, r24
  a0:	e0 50       	subi	r30, 0x00	; 0
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	a2 81       	ldd	r26, Z+2	; 0x02
  a6:	b3 81       	ldd	r27, Z+3	; 0x03
  a8:	2c 91       	ld	r18, X
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	06 80       	ldd	r0, Z+6	; 0x06
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <pinWrite.part.1+0x20>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <pinWrite.part.1+0x1c>
  ba:	82 2b       	or	r24, r18
  bc:	8c 93       	st	X, r24
  be:	08 95       	ret

000000c0 <pinWrite.constprop.2>:
  c0:	87 31       	cpi	r24, 0x17	; 23
  c2:	a0 f4       	brcc	.+40     	; 0xec <pinWrite.constprop.2+0x2c>
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	89 9f       	mul	r24, r25
  c8:	f0 01       	movw	r30, r0
  ca:	11 24       	eor	r1, r1
  cc:	e0 50       	subi	r30, 0x00	; 0
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	a2 81       	ldd	r26, Z+2	; 0x02
  d2:	b3 81       	ldd	r27, Z+3	; 0x03
  d4:	2c 91       	ld	r18, X
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	06 80       	ldd	r0, Z+6	; 0x06
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <pinWrite.constprop.2+0x22>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <pinWrite.constprop.2+0x1e>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	8c 93       	st	X, r24
  ec:	08 95       	ret

000000ee <adc_init>:
  ee:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
  f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
  f6:	83 6c       	ori	r24, 0xC3	; 195
  f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
  fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 100:	84 ff       	sbrs	r24, 4
 102:	fc cf       	rjmp	.-8      	; 0xfc <adc_init+0xe>
 104:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 10e:	08 95       	ret

00000110 <adc_read_16bit>:
 110:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
 114:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 118:	83 64       	ori	r24, 0x43	; 67
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 11e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 122:	84 ff       	sbrs	r24, 4
 124:	fc cf       	rjmp	.-8      	; 0x11e <adc_read_16bit+0xe>
 126:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 130:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 134:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 138:	08 95       	ret

0000013a <init_code>:

//init
void init_code()
{
	/*initialize led*/
	adc_init();
 13a:	d9 df       	rcall	.-78     	; 0xee <adc_init>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	96 df       	rcall	.-212    	; 0x6c <pinSet.part.0>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	94 df       	rcall	.-216    	; 0x6c <pinSet.part.0>
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	92 cf       	rjmp	.-220    	; 0x6c <pinSet.part.0>

00000148 <main>:
}

//main
int main()
{
	init_code();
 148:	f8 df       	rcall	.-16     	; 0x13a <init_code>
	while(1){
		/*read adc value from ADC0 (0 - 1023)*/
		adc_value  = adc_read_16bit(ADC1);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	e1 df       	rcall	.-62     	; 0x110 <adc_read_16bit>
 14e:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
 152:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>

		/*check read value and activate leds*/
		if(adc_value >=0 && adc_value < 256)
 156:	8f 3f       	cpi	r24, 0xFF	; 255
 158:	91 05       	cpc	r25, r1
 15a:	09 f0       	breq	.+2      	; 0x15e <main+0x16>
 15c:	18 f4       	brcc	.+6      	; 0x164 <main+0x1c>
		{
			pinWrite(D0, LOW);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	af df       	rcall	.-162    	; 0xc0 <pinWrite.constprop.2>
 162:	07 c0       	rjmp	.+14     	; 0x172 <main+0x2a>
			pinWrite(D1, LOW);
			pinWrite(D2, LOW);
		}

		else if(adc_value >=256 && adc_value <=512)
 164:	9c 01       	movw	r18, r24
 166:	3a 95       	dec	r19
 168:	21 30       	cpi	r18, 0x01	; 1
 16a:	31 40       	sbci	r19, 0x01	; 1
 16c:	28 f4       	brcc	.+10     	; 0x178 <main+0x30>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	92 df       	rcall	.-220    	; 0x96 <pinWrite.part.1>
		{
			pinWrite(D0, HIGH);
			pinWrite(D1, LOW);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	a5 df       	rcall	.-182    	; 0xc0 <pinWrite.constprop.2>
 176:	0a c0       	rjmp	.+20     	; 0x18c <main+0x44>
			pinWrite(D2, LOW);
		}
		else if(adc_value > 512 && adc_value <=768)
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	92 40       	sbci	r25, 0x02	; 2
 17c:	8f 3f       	cpi	r24, 0xFF	; 255
 17e:	91 05       	cpc	r25, r1
 180:	09 f0       	breq	.+2      	; 0x184 <main+0x3c>
 182:	38 f4       	brcc	.+14     	; 0x192 <main+0x4a>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	87 df       	rcall	.-242    	; 0x96 <pinWrite.part.1>
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	85 df       	rcall	.-246    	; 0x96 <pinWrite.part.1>
		{
			pinWrite(D0, HIGH);
			pinWrite(D1, HIGH);
			pinWrite(D2, LOW);
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	98 df       	rcall	.-208    	; 0xc0 <pinWrite.constprop.2>
 190:	dc cf       	rjmp	.-72     	; 0x14a <main+0x2>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	80 df       	rcall	.-256    	; 0x96 <pinWrite.part.1>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	7e df       	rcall	.-260    	; 0x96 <pinWrite.part.1>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	7c df       	rcall	.-264    	; 0x96 <pinWrite.part.1>
 19e:	d5 cf       	rjmp	.-86     	; 0x14a <main+0x2>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
