
matrix_8x8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097f  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074d  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002db  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f4  00000000  00000000  000019da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	Display(ch);
}

static inline void init_matrix()
{
	DDRD = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  9a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  9c:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;	
  9e:	1b b8       	out	0x0b, r1	; 11
static inline void row_shift()
{
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
	{ 
		PORTB = (1 << x);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	50 e0       	ldi	r21, 0x00	; 0
		//_delay_ms(500);
	}
}

int main(void)
{
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f0 e0       	ldi	r31, 0x00	; 0
static inline void row_shift()
{
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
	{ 
		PORTB = (1 << x);
  a8:	ca 01       	movw	r24, r20
  aa:	0e 2e       	mov	r0, r30
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x1c>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <main+0x18>
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	6f e0       	ldi	r22, 0x0F	; 15
  ba:	15 c0       	rjmp	.+42     	; 0xe6 <main+0x50>
		for(z=0; z<15;z++){
			for(y=0; y<8; y++) //column
				{
					PORTD = ~(1 << y);
  bc:	9a 01       	movw	r18, r20
  be:	08 2e       	mov	r0, r24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x30>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <main+0x2c>
  ca:	20 95       	com	r18
  cc:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	af e9       	ldi	r26, 0x9F	; 159
  d0:	bf e0       	ldi	r27, 0x0F	; 15
  d2:	11 97       	sbiw	r26, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x42>
  d8:	00 00       	nop
  da:	01 96       	adiw	r24, 0x01	; 1
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
	{ 
		PORTB = (1 << x);
		for(z=0; z<15;z++){
			for(y=0; y<8; y++) //column
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	91 05       	cpc	r25, r1
  e0:	69 f7       	brne	.-38     	; 0xbc <main+0x26>
  e2:	61 50       	subi	r22, 0x01	; 1
{
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
	{ 
		PORTB = (1 << x);
		for(z=0; z<15;z++){
  e4:	19 f0       	breq	.+6      	; 0xec <main+0x56>
		//_delay_ms(500);
	}
}

int main(void)
{
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	e8 cf       	rjmp	.-48     	; 0xbc <main+0x26>
  ec:	31 96       	adiw	r30, 0x01	; 1
}

static inline void row_shift()
{
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
  ee:	e8 30       	cpi	r30, 0x08	; 8
  f0:	f1 05       	cpc	r31, r1
  f2:	d1 f6       	brne	.-76     	; 0xa8 <main+0x12>
  f4:	e0 e0       	ldi	r30, 0x00	; 0
  f6:	f0 e0       	ldi	r31, 0x00	; 0
static inline void column_shift()
{
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
	{
		PORTD = ~(1 << x);
  f8:	ca 01       	movw	r24, r20
  fa:	0e 2e       	mov	r0, r30
  fc:	02 c0       	rjmp	.+4      	; 0x102 <main+0x6c>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <main+0x68>
 106:	80 95       	com	r24
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	6f e0       	ldi	r22, 0x0F	; 15
 10c:	14 c0       	rjmp	.+40     	; 0x136 <main+0xa0>
		for(z=0; z<15;z++){
			for(y=0; y<8; y++) //column
			{
				PORTB = (1 << y);
 10e:	9a 01       	movw	r18, r20
 110:	08 2e       	mov	r0, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <main+0x82>
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <main+0x7e>
 11c:	25 b9       	out	0x05, r18	; 5
 11e:	af e9       	ldi	r26, 0x9F	; 159
 120:	bf e0       	ldi	r27, 0x0F	; 15
 122:	11 97       	sbiw	r26, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x8c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x92>
 128:	00 00       	nop
 12a:	01 96       	adiw	r24, 0x01	; 1
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
	{
		PORTD = ~(1 << x);
		for(z=0; z<15;z++){
			for(y=0; y<8; y++) //column
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	91 05       	cpc	r25, r1
 130:	71 f7       	brne	.-36     	; 0x10e <main+0x78>
 132:	61 50       	subi	r22, 0x01	; 1
{
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
	{
		PORTD = ~(1 << x);
		for(z=0; z<15;z++){
 134:	19 f0       	breq	.+6      	; 0x13c <main+0xa6>
}

static inline void row_shift()
{
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	e9 cf       	rjmp	.-46     	; 0x10e <main+0x78>
 13c:	31 96       	adiw	r30, 0x01	; 1
}

static inline void column_shift()
{
	uint8_t x, y, z;
	for(x=0; x<8; x++) //row
 13e:	e8 30       	cpi	r30, 0x08	; 8
 140:	f1 05       	cpc	r31, r1
 142:	d1 f6       	brne	.-76     	; 0xf8 <main+0x62>
 144:	af cf       	rjmp	.-162    	; 0xa4 <main+0xe>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
