
FreqGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f97  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd4  00000000  00000000  0000131f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ff  00000000  00000000  000020f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000024f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f2  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000205  00000000  00000000  00002ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002dab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_17>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  f8:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <_ZN3GenC1Eh>:
 *  Author: mercy
 */ 
#include "FreqGen.h"
//initialize the frequency generator
//if no value supplied set the frequency to 1Hz
Gen::Gen(uint8_t freq = 10){
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24
	this->setFreq = freq;
 106:	68 83       	st	Y, r22

//set the target timer value.
//prescale of 256.
//Target Timer Count = (Input Frequency / Prescale) / Target Frequency - 1 
void inline Gen::timerCount(){
	this->prescaleVal = (F_CPU / pValue) / this->setFreq -1;
 108:	26 2f       	mov	r18, r22
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	64 e2       	ldi	r22, 0x24	; 36
 112:	74 ef       	ldi	r23, 0xF4	; 244
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__divmodsi4>
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	31 09       	sbc	r19, r1
 120:	3a 83       	std	Y+2, r19	; 0x02
 122:	29 83       	std	Y+1, r18	; 0x01
//initialize the frequency generator
//if no value supplied set the frequency to 1Hz
Gen::Gen(uint8_t freq = 10){
	this->setFreq = freq;
	timerCount();	
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <_ZN3Gen7initGenEv>:
	this->prescaleVal = (F_CPU / pValue) / this->setFreq -1;
}

//initialize generator
//set timer outputs to output a 10 MHz freq
void Gen::initGen(){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
	DDRB |= (1 << 0); // Set LED as output
 130:	20 9a       	sbi	0x04, 0	; 4

	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
 132:	e1 e8       	ldi	r30, 0x81	; 129
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	98 60       	ori	r25, 0x08	; 8
 13a:	90 83       	st	Z, r25

	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
 13c:	af e6       	ldi	r26, 0x6F	; 111
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	9c 91       	ld	r25, X
 142:	92 60       	ori	r25, 0x02	; 2
 144:	9c 93       	st	X, r25

	sei(); //  Enable global interrupts
 146:	78 94       	sei

	OCR1A   = this->prescaleVal; // Set CTC compare value to 1Hz at 16MHz.
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 150:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

	TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start timer at F_CPU/256
 154:	80 81       	ld	r24, Z
 156:	83 60       	ori	r24, 0x03	; 3
 158:	80 83       	st	Z, r24
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <_ZN3Gen9frequencyEh>:
	timerCount();	
}

//check if the user input frequency value is within the range
//else set the frequency to 1Hz.
void Gen::frequency(uint8_t freq){
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
	if(freq > 0 && freq <= 50){
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	86 0f       	add	r24, r22
 16a:	82 33       	cpi	r24, 0x32	; 50
 16c:	10 f4       	brcc	.+4      	; 0x172 <_ZN3Gen9frequencyEh+0x12>
		this->setFreq = freq;
 16e:	68 83       	st	Y, r22
 170:	02 c0       	rjmp	.+4      	; 0x176 <_ZN3Gen9frequencyEh+0x16>
	}else{
		this->setFreq = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	88 83       	st	Y, r24
	}
	cli();
 176:	f8 94       	cli

//set the target timer value.
//prescale of 256.
//Target Timer Count = (Input Frequency / Prescale) / Target Frequency - 1 
void inline Gen::timerCount(){
	this->prescaleVal = (F_CPU / pValue) / this->setFreq -1;
 178:	28 81       	ld	r18, Y
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	64 e2       	ldi	r22, 0x24	; 36
 182:	74 ef       	ldi	r23, 0xF4	; 244
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__divmodsi4>
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	31 09       	sbc	r19, r1
 190:	3a 83       	std	Y+2, r19	; 0x02
 192:	29 83       	std	Y+1, r18	; 0x01
	}else{
		this->setFreq = 1;
	}
	cli();
	timerCount();
	initGen();
 194:	ce 01       	movw	r24, r28
 196:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN3Gen7initGenEv>
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <__vector_17>:
}

//Timer 1 interrupt 
//toggle the PORTB0 PIN.
ISR(TIMER1_COMPA_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
	PORTB ^= (1 << PORTB0); // Toggle the LED
 1ae:	95 b1       	in	r25, 0x05	; 5
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	89 27       	eor	r24, r25
 1b4:	85 b9       	out	0x05, r24	; 5
	
}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <main>:

#include <avr/io.h>
#include "FreqGen.h"

int main(void)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <main+0x6>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	Gen Fg(20);
 1ce:	64 e1       	ldi	r22, 0x14	; 20
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	0e 94 80 00 	call	0x100	; 0x100 <_ZN3GenC1Eh>
	Fg.frequency(30);
 1d8:	6e e1       	ldi	r22, 0x1E	; 30
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN3Gen9frequencyEh>
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <main+0x1e>

000001e4 <__divmodsi4>:
 1e4:	05 2e       	mov	r0, r21
 1e6:	97 fb       	bst	r25, 7
 1e8:	1e f4       	brtc	.+6      	; 0x1f0 <__divmodsi4+0xc>
 1ea:	00 94       	com	r0
 1ec:	0e 94 09 01 	call	0x212	; 0x212 <__negsi2>
 1f0:	57 fd       	sbrc	r21, 7
 1f2:	07 d0       	rcall	.+14     	; 0x202 <__divmodsi4_neg2>
 1f4:	0e 94 11 01 	call	0x222	; 0x222 <__udivmodsi4>
 1f8:	07 fc       	sbrc	r0, 7
 1fa:	03 d0       	rcall	.+6      	; 0x202 <__divmodsi4_neg2>
 1fc:	4e f4       	brtc	.+18     	; 0x210 <__divmodsi4_exit>
 1fe:	0c 94 09 01 	jmp	0x212	; 0x212 <__negsi2>

00000202 <__divmodsi4_neg2>:
 202:	50 95       	com	r21
 204:	40 95       	com	r20
 206:	30 95       	com	r19
 208:	21 95       	neg	r18
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
 20c:	4f 4f       	sbci	r20, 0xFF	; 255
 20e:	5f 4f       	sbci	r21, 0xFF	; 255

00000210 <__divmodsi4_exit>:
 210:	08 95       	ret

00000212 <__negsi2>:
 212:	90 95       	com	r25
 214:	80 95       	com	r24
 216:	70 95       	com	r23
 218:	61 95       	neg	r22
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	8f 4f       	sbci	r24, 0xFF	; 255
 21e:	9f 4f       	sbci	r25, 0xFF	; 255
 220:	08 95       	ret

00000222 <__udivmodsi4>:
 222:	a1 e2       	ldi	r26, 0x21	; 33
 224:	1a 2e       	mov	r1, r26
 226:	aa 1b       	sub	r26, r26
 228:	bb 1b       	sub	r27, r27
 22a:	fd 01       	movw	r30, r26
 22c:	0d c0       	rjmp	.+26     	; 0x248 <__udivmodsi4_ep>

0000022e <__udivmodsi4_loop>:
 22e:	aa 1f       	adc	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	ee 1f       	adc	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	a2 17       	cp	r26, r18
 238:	b3 07       	cpc	r27, r19
 23a:	e4 07       	cpc	r30, r20
 23c:	f5 07       	cpc	r31, r21
 23e:	20 f0       	brcs	.+8      	; 0x248 <__udivmodsi4_ep>
 240:	a2 1b       	sub	r26, r18
 242:	b3 0b       	sbc	r27, r19
 244:	e4 0b       	sbc	r30, r20
 246:	f5 0b       	sbc	r31, r21

00000248 <__udivmodsi4_ep>:
 248:	66 1f       	adc	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	88 1f       	adc	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	1a 94       	dec	r1
 252:	69 f7       	brne	.-38     	; 0x22e <__udivmodsi4_loop>
 254:	60 95       	com	r22
 256:	70 95       	com	r23
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	9b 01       	movw	r18, r22
 25e:	ac 01       	movw	r20, r24
 260:	bd 01       	movw	r22, r26
 262:	cf 01       	movw	r24, r30
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
