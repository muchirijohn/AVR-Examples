
led-switch-on-off.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000007e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1b  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000738  00000000  00000000  00000b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  000012bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 30       	cpi	r26, 0x00	; 0
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	08 d0       	rcall	.+16     	; 0x62 <main>
  52:	13 c0       	rjmp	.+38     	; 0x7a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_code>:
static inline void pinSet(uint8_t pin, uint8_t mode) {
	if (pin < pins) {
		if (mode) {
			*pins_def[pin].DDRx |=  _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].DDRx &= ~ _BV(pins_def[pin].bit);
  56:	38 98       	cbi	0x07, 0	; 7
  58:	38 98       	cbi	0x07, 0	; 7
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
  5a:	40 9a       	sbi	0x08, 0	; 8
      sets PORTB5 - B5  as output.                                                                      
************************************************************************/
static inline void pinSet(uint8_t pin, uint8_t mode) {
	if (pin < pins) {
		if (mode) {
			*pins_def[pin].DDRx |=  _BV(pins_def[pin].bit);
  5c:	50 9a       	sbi	0x0a, 0	; 10
  5e:	51 9a       	sbi	0x0a, 1	; 10
  60:	08 95       	ret

00000062 <main>:
* main function
************************************************************************/
int main()
{
	//init
	init_code();
  62:	f9 df       	rcall	.-14     	; 0x56 <init_code>
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
  64:	30 9b       	sbis	0x06, 0	; 6
  66:	02 c0       	rjmp	.+4      	; 0x6c <main+0xa>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
  68:	58 9a       	sbi	0x0b, 0	; 11
  6a:	01 c0       	rjmp	.+2      	; 0x6e <main+0xc>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
  6c:	58 98       	cbi	0x0b, 0	; 11
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
  6e:	30 99       	sbic	0x06, 0	; 6
  70:	02 c0       	rjmp	.+4      	; 0x76 <main+0x14>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
  72:	59 9a       	sbi	0x0b, 1	; 11
  74:	f7 cf       	rjmp	.-18     	; 0x64 <main+0x2>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
  76:	59 98       	cbi	0x0b, 1	; 11
  78:	f5 cf       	rjmp	.-22     	; 0x64 <main+0x2>

0000007a <_exit>:
  7a:	f8 94       	cli

0000007c <__stop_program>:
  7c:	ff cf       	rjmp	.-2      	; 0x7c <__stop_program>
