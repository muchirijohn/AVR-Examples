
blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ec  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074f  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  000012a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	04 d0       	rcall	.+8      	; 0x4a <main>
  42:	19 c0       	rjmp	.+50     	; 0x76 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <init_code>:
      sets PORTB5 - B5  as output.                                                                      
************************************************************************/
static inline void pinSet(uint8_t pin, uint8_t mode) {
	if (pin < pins) {
		if (mode) {
			*pins_def[pin].DDRx |=  _BV(pins_def[pin].bit);
  46:	50 9a       	sbi	0x0a, 0	; 10
  48:	08 95       	ret

0000004a <main>:
* main function
************************************************************************/
int main()
{
	//init code
	init_code();
  4a:	fd df       	rcall	.-6      	; 0x46 <init_code>
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
  4c:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	2f ef       	ldi	r18, 0xFF	; 255
  50:	89 e6       	ldi	r24, 0x69	; 105
  52:	98 e1       	ldi	r25, 0x18	; 24
  54:	21 50       	subi	r18, 0x01	; 1
  56:	80 40       	sbci	r24, 0x00	; 0
  58:	90 40       	sbci	r25, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <main+0xa>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <main+0x14>
  5e:	00 00       	nop
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
  60:	58 98       	cbi	0x0b, 0	; 11
  62:	2f ef       	ldi	r18, 0xFF	; 255
  64:	89 e6       	ldi	r24, 0x69	; 105
  66:	98 e1       	ldi	r25, 0x18	; 24
  68:	21 50       	subi	r18, 0x01	; 1
  6a:	80 40       	sbci	r24, 0x00	; 0
  6c:	90 40       	sbci	r25, 0x00	; 0
  6e:	e1 f7       	brne	.-8      	; 0x68 <main+0x1e>
  70:	00 c0       	rjmp	.+0      	; 0x72 <main+0x28>
  72:	00 00       	nop
  74:	eb cf       	rjmp	.-42     	; 0x4c <main+0x2>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
