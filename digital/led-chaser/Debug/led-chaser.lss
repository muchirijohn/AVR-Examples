
led-chaser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a14  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000740  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031d  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019f  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e0       	ldi	r30, 0x0C	; 12
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a2 30       	cpi	r26, 0x02	; 2
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	4f c0       	rjmp	.+158    	; 0x108 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
//enum to write value to full port
static inline void portSet(uint8_t port, uint8_t value)
{
	if(port == B) DDRB = value;
	if(port == C) DDRC = value;
	if(port == D) DDRD = value;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a b9       	out	0x0a, r24	; 10
	//init
	init_code();
	//loop forever
	while(1){
		//led chaser
		for(byt = 0; byt<=7; byt++)
  70:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  74:	80 e0       	ldi	r24, 0x00	; 0
		{
			portWrite(D, (1 << byt));
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	a9 01       	movw	r20, r18
  7c:	02 c0       	rjmp	.+4      	; 0x82 <main+0x16>
  7e:	44 0f       	add	r20, r20
  80:	55 1f       	adc	r21, r21
  82:	8a 95       	dec	r24
  84:	e2 f7       	brpl	.-8      	; 0x7e <main+0x12>

static inline void portWrite(uint8_t port, uint8_t value)
{
	if(port == B) PORTB = value;
	if(port == C) PORTC = value;
	if(port == D) PORTD = value;
  86:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	5f e7       	ldi	r21, 0x7F	; 127
  8a:	8a e1       	ldi	r24, 0x1A	; 26
  8c:	96 e0       	ldi	r25, 0x06	; 6
  8e:	51 50       	subi	r21, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
	//init
	init_code();
	//loop forever
	while(1){
		//led chaser
		for(byt = 0; byt<=7; byt++)
  9a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	48 f3       	brcs	.-46     	; 0x7a <main+0xe>
		{
			portWrite(D, (1 << byt));
			_delay_ms(250);
		}

		for(byt = 0; byt<=7; byt++)
  a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  ac:	80 e0       	ldi	r24, 0x00	; 0
		{
			portWrite(D, (0x80 >> byt));
  ae:	20 e8       	ldi	r18, 0x80	; 128
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	a9 01       	movw	r20, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x4e>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	8a 95       	dec	r24
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <main+0x4a>
  be:	4b b9       	out	0x0b, r20	; 11
  c0:	5f e7       	ldi	r21, 0x7F	; 127
  c2:	8a e1       	ldi	r24, 0x1A	; 26
  c4:	96 e0       	ldi	r25, 0x06	; 6
  c6:	51 50       	subi	r21, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x5a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
		{
			portWrite(D, (1 << byt));
			_delay_ms(250);
		}

		for(byt = 0; byt<=7; byt++)
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	48 f3       	brcs	.-46     	; 0xb2 <main+0x46>
		{
			portWrite(D, (0x80 >> byt));
			_delay_ms(250);
		}

		for(byt=0; byt<=255; byt++)
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			portWrite(D, byt);
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	2f e7       	ldi	r18, 0x7F	; 127
  ec:	4a e1       	ldi	r20, 0x1A	; 26
  ee:	56 e0       	ldi	r21, 0x06	; 6
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	40 40       	sbci	r20, 0x00	; 0
  f4:	50 40       	sbci	r21, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x84>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x8e>
  fa:	00 00       	nop
		{
			portWrite(D, (0x80 >> byt));
			_delay_ms(250);
		}

		for(byt=0; byt<=255; byt++)
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	ee cf       	rjmp	.-36     	; 0xe4 <main+0x78>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
