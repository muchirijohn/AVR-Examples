
usart-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  00800104  00800104  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e6  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022e  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ff  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024f  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ab  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000197e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <usart_available>:
	*/
	static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
	{
		RingBuff_Count_t Count;
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  a6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  a8:	f8 94       	cli
		{
			Count = Buffer->Count;
  aa:	90 91 88 01 	lds	r25, 0x0188
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  ae:	8f bf       	out	0x3f, r24	; 63
		UDR0 = (uint8_t)RingBuffer_Remove(&tx_buff);//(char)data;
}

//check if there is available data
uint8_t usart_available(){
	return (!(RingBuffer_IsEmpty(&rx_buff)));
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	91 11       	cpse	r25, r1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <usart_available+0x12>
  b6:	80 e0       	ldi	r24, 0x00	; 0
}
  b8:	08 95       	ret

000000ba <__vector_18>:
	}
}


ISR(USART_RX_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	//while ( !(UCSR0A & (1<<RXC0)) )
	//;
	/* Get and return received data from buffer */
	store_rx((uint8_t)UDR0);
  d2:	80 91 c6 00 	lds	r24, 0x00C6
	*  \param[in]     Data    Data element to insert into the buffer
	*/
	static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
	const RingBuff_Data_t Data)
	{
		*Buffer->In = Data;
  d6:	e4 e8       	ldi	r30, 0x84	; 132
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	a0 81       	ld	r26, Z
  dc:	b1 81       	ldd	r27, Z+1	; 0x01
  de:	8c 93       	st	X, r24
		
		if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
  ea:	8e 17       	cp	r24, r30
  ec:	9f 07       	cpc	r25, r31
  ee:	31 f4       	brne	.+12     	; 0xfc <__vector_18+0x42>
		Buffer->In = Buffer->Buffer;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 85 01 	sts	0x0185, r25
  f8:	80 93 84 01 	sts	0x0184, r24

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  fc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  fe:	f8 94       	cli
		{
			Buffer->Count++;
 100:	e8 e8       	ldi	r30, 0x88	; 136
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	90 81       	ld	r25, Z
 106:	9f 5f       	subi	r25, 0xFF	; 255
 108:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 10a:	8f bf       	out	0x3f, r24	; 63
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <main>:
	*
	*  \param[out] Buffer  Pointer to a ring buffer structure to initialize
	*/
	static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 124:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 126:	f8 94       	cli
		{
			Buffer->In  = Buffer->Buffer;
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	90 93 85 01 	sts	0x0185, r25
 130:	80 93 84 01 	sts	0x0184, r24
			Buffer->Out = Buffer->Buffer;
 134:	90 93 87 01 	sts	0x0187, r25
 138:	80 93 86 01 	sts	0x0186, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 13c:	2f bf       	out	0x3f, r18	; 63
	*
	*  \param[out] Buffer  Pointer to a ring buffer structure to initialize
	*/
	static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 13e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 140:	f8 94       	cli
		{
			Buffer->In  = Buffer->Buffer;
 142:	89 e8       	ldi	r24, 0x89	; 137
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	90 93 0a 02 	sts	0x020A, r25
 14a:	80 93 09 02 	sts	0x0209, r24
			Buffer->Out = Buffer->Buffer;
 14e:	90 93 0c 02 	sts	0x020C, r25
 152:	80 93 0b 02 	sts	0x020B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 156:	2f bf       	out	0x3f, r18	; 63
	/*initialize buffers*/
	RingBuffer_InitBuffer(&rx_buff);
	RingBuffer_InitBuffer(&tx_buff);
	
	ubrr = (uint16_t)ub;//(F_CPU/16/baud)-1;////(F_CPU/(baud * 16)) - 1;
	UBRR0H = (uint8_t)(ubrr >> 8);
 158:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)ubrr;
 15c:	83 e3       	ldi	r24, 0x33	; 51
 15e:	80 93 c4 00 	sts	0x00C4, r24
	
	//UCSR0A = (1 << RXC0) | (1 << TXC0);
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1 << RXCIE0);// | (1 << TXCIE0);
 162:	88 e9       	ldi	r24, 0x98	; 152
 164:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C = (1<<UCSZ00) |(1 << UCSZ01);
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	80 93 c2 00 	sts	0x00C2, r24
	//cli();
	sei();
 16e:	78 94       	sei
	*
	*  \return Next data element stored in the buffer
	*/
	static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
	{
		RingBuff_Data_t Data = *Buffer->Out;
 170:	0f 2e       	mov	r0, r31
 172:	f6 e8       	ldi	r31, 0x86	; 134
 174:	ef 2e       	mov	r14, r31
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	ff 2e       	mov	r15, r31
 17a:	f0 2d       	mov	r31, r0
		
		if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
		Buffer->Out = Buffer->Buffer;
 17c:	0f 2e       	mov	r0, r31
 17e:	f4 e0       	ldi	r31, 0x04	; 4
 180:	2f 2e       	mov	r2, r31
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	3f 2e       	mov	r3, r31
 186:	f0 2d       	mov	r31, r0

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			Buffer->Count--;
 188:	0f 2e       	mov	r0, r31
 18a:	f8 e8       	ldi	r31, 0x88	; 136
 18c:	cf 2e       	mov	r12, r31
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	df 2e       	mov	r13, r31
 192:	f0 2d       	mov	r31, r0
	*  \param[in]     Data    Data element to insert into the buffer
	*/
	static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
	const RingBuff_Data_t Data)
	{
		*Buffer->In = Data;
 194:	09 e0       	ldi	r16, 0x09	; 9
 196:	12 e0       	ldi	r17, 0x02	; 2
		
		if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
		Buffer->In = Buffer->Buffer;
 198:	0f 2e       	mov	r0, r31
 19a:	f9 e8       	ldi	r31, 0x89	; 137
 19c:	af 2e       	mov	r10, r31
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	bf 2e       	mov	r11, r31
 1a2:	f0 2d       	mov	r31, r0

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			Buffer->Count++;
 1a4:	0f 2e       	mov	r0, r31
 1a6:	fd e0       	ldi	r31, 0x0D	; 13
 1a8:	8f 2e       	mov	r8, r31
 1aa:	f2 e0       	ldi	r31, 0x02	; 2
 1ac:	9f 2e       	mov	r9, r31
 1ae:	f0 2d       	mov	r31, r0
//transmit char to usart, tx
static inline void usart_Transmit(uint8_t data )
{
	RingBuffer_Insert(&tx_buff, data);
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
 1b0:	c0 ec       	ldi	r28, 0xC0	; 192
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	94 c0       	rjmp	.+296    	; 0x2de <main+0x1ba>
	*
	*  \return Next data element stored in the buffer
	*/
	static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
	{
		RingBuff_Data_t Data = *Buffer->Out;
 1b6:	d7 01       	movw	r26, r14
 1b8:	ed 91       	ld	r30, X+
 1ba:	fc 91       	ld	r31, X
 1bc:	11 97       	sbiw	r26, 0x01	; 1
 1be:	21 91       	ld	r18, Z+
		
		if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 1c0:	ed 93       	st	X+, r30
 1c2:	fc 93       	st	X, r31
 1c4:	e4 58       	subi	r30, 0x84	; 132
 1c6:	f1 40       	sbci	r31, 0x01	; 1
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <main+0xac>
		Buffer->Out = Buffer->Buffer;
 1ca:	f7 01       	movw	r30, r14
 1cc:	31 82       	std	Z+1, r3	; 0x01
 1ce:	20 82       	st	Z, r2

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 1d0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1d2:	f8 94       	cli
		{
			Buffer->Count--;
 1d4:	d6 01       	movw	r26, r12
 1d6:	9c 91       	ld	r25, X
 1d8:	91 50       	subi	r25, 0x01	; 1
 1da:	9c 93       	st	X, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1dc:	8f bf       	out	0x3f, r24	; 63
	*  \param[in]     Data    Data element to insert into the buffer
	*/
	static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
	const RingBuff_Data_t Data)
	{
		*Buffer->In = Data;
 1de:	d8 01       	movw	r26, r16
 1e0:	ed 91       	ld	r30, X+
 1e2:	fc 91       	ld	r31, X
 1e4:	11 97       	sbiw	r26, 0x01	; 1
 1e6:	20 83       	st	Z, r18
		
		if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 1e8:	8d 91       	ld	r24, X+
 1ea:	9c 91       	ld	r25, X
 1ec:	11 97       	sbiw	r26, 0x01	; 1
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	8d 93       	st	X+, r24
 1f2:	9c 93       	st	X, r25
 1f4:	89 50       	subi	r24, 0x09	; 9
 1f6:	92 40       	sbci	r25, 0x02	; 2
 1f8:	19 f4       	brne	.+6      	; 0x200 <main+0xdc>
		Buffer->In = Buffer->Buffer;
 1fa:	f8 01       	movw	r30, r16
 1fc:	b1 82       	std	Z+1, r11	; 0x01
 1fe:	a0 82       	st	Z, r10

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 200:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 202:	f8 94       	cli
		{
			Buffer->Count++;
 204:	d4 01       	movw	r26, r8
 206:	9c 91       	ld	r25, X
 208:	9f 5f       	subi	r25, 0xFF	; 255
 20a:	9c 93       	st	X, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 20c:	8f bf       	out	0x3f, r24	; 63
 20e:	88 81       	ld	r24, Y
 210:	85 ff       	sbrs	r24, 5
 212:	fd cf       	rjmp	.-6      	; 0x20e <main+0xea>
	*/
	static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
	{
		RingBuff_Count_t Count;
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 214:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 216:	f8 94       	cli
		{
			Count = Buffer->Count;
 218:	f4 01       	movw	r30, r8
 21a:	80 81       	ld	r24, Z
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 21c:	9f bf       	out	0x3f, r25	; 63
	/* Put data into buffer, sends the data */
	if(!RingBuffer_IsEmpty(&tx_buff))
 21e:	88 23       	and	r24, r24
 220:	b1 f0       	breq	.+44     	; 0x24e <main+0x12a>
	*
	*  \return Next data element stored in the buffer
	*/
	static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
	{
		RingBuff_Data_t Data = *Buffer->Out;
 222:	d3 01       	movw	r26, r6
 224:	ed 91       	ld	r30, X+
 226:	fc 91       	ld	r31, X
 228:	11 97       	sbiw	r26, 0x01	; 1
 22a:	81 91       	ld	r24, Z+
		
		if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 22c:	ed 93       	st	X+, r30
 22e:	fc 93       	st	X, r31
 230:	e9 50       	subi	r30, 0x09	; 9
 232:	f2 40       	sbci	r31, 0x02	; 2
 234:	19 f4       	brne	.+6      	; 0x23c <main+0x118>
		Buffer->Out = Buffer->Buffer;
 236:	f3 01       	movw	r30, r6
 238:	b1 82       	std	Z+1, r11	; 0x01
 23a:	a0 82       	st	Z, r10

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 23c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 23e:	f8 94       	cli
		{
			Buffer->Count--;
 240:	d4 01       	movw	r26, r8
 242:	3c 91       	ld	r19, X
 244:	31 50       	subi	r19, 0x01	; 1
 246:	3c 93       	st	X, r19
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 248:	9f bf       	out	0x3f, r25	; 63
		UDR0 = (uint8_t)RingBuffer_Remove(&tx_buff);//(char)data;
 24a:	f2 01       	movw	r30, r4
 24c:	80 83       	st	Z, r24
    {
       while(usart_available() > 0) 
	   {
		   unsigned char ch= (unsigned char)usart_read();
		   usart_Transmit(ch);
		   if(ch == '\n') usart_puts("\n\r");
 24e:	2a 30       	cpi	r18, 0x0A	; 10
 250:	09 f0       	breq	.+2      	; 0x254 <main+0x130>
 252:	50 c0       	rjmp	.+160    	; 0x2f4 <main+0x1d0>
 254:	e1 e0       	ldi	r30, 0x01	; 1
 256:	f1 e0       	ldi	r31, 0x01	; 1
	//if(!usart_available())
	return (uint8_t)RingBuffer_Remove(&rx_buff);
}

static inline void usart_puts(char *p){
	while(*p){
 258:	4a e0       	ldi	r20, 0x0A	; 10
	*
	*  \return Next data element stored in the buffer
	*/
	static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
	{
		RingBuff_Data_t Data = *Buffer->Out;
 25a:	6b e0       	ldi	r22, 0x0B	; 11
 25c:	72 e0       	ldi	r23, 0x02	; 2
	RingBuffer_Insert(&tx_buff, data);
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	if(!RingBuffer_IsEmpty(&tx_buff))
		UDR0 = (uint8_t)RingBuffer_Remove(&tx_buff);//(char)data;
 25e:	26 ec       	ldi	r18, 0xC6	; 198
 260:	30 e0       	ldi	r19, 0x00	; 0
	*  \param[in]     Data    Data element to insert into the buffer
	*/
	static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
	const RingBuff_Data_t Data)
	{
		*Buffer->In = Data;
 262:	d8 01       	movw	r26, r16
 264:	8d 91       	ld	r24, X+
 266:	9c 91       	ld	r25, X
 268:	dc 01       	movw	r26, r24
 26a:	4c 93       	st	X, r20
		
		if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 26c:	d8 01       	movw	r26, r16
 26e:	8d 91       	ld	r24, X+
 270:	9c 91       	ld	r25, X
 272:	11 97       	sbiw	r26, 0x01	; 1
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	8d 93       	st	X+, r24
 278:	9c 93       	st	X, r25
 27a:	89 50       	subi	r24, 0x09	; 9
 27c:	92 40       	sbci	r25, 0x02	; 2
 27e:	19 f4       	brne	.+6      	; 0x286 <main+0x162>
		Buffer->In = Buffer->Buffer;
 280:	d8 01       	movw	r26, r16
 282:	ad 92       	st	X+, r10
 284:	bc 92       	st	X, r11

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 286:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 288:	f8 94       	cli
		{
			Buffer->Count++;
 28a:	d4 01       	movw	r26, r8
 28c:	9c 91       	ld	r25, X
 28e:	9f 5f       	subi	r25, 0xFF	; 255
 290:	9c 93       	st	X, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 292:	8f bf       	out	0x3f, r24	; 63
//transmit char to usart, tx
static inline void usart_Transmit(uint8_t data )
{
	RingBuffer_Insert(&tx_buff, data);
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
 294:	88 81       	ld	r24, Y
 296:	85 ff       	sbrs	r24, 5
 298:	fd cf       	rjmp	.-6      	; 0x294 <main+0x170>
	*/
	static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
	{
		RingBuff_Count_t Count;
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 29a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 29c:	f8 94       	cli
		{
			Count = Buffer->Count;
 29e:	d4 01       	movw	r26, r8
 2a0:	8c 91       	ld	r24, X
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2a2:	9f bf       	out	0x3f, r25	; 63
	/* Put data into buffer, sends the data */
	if(!RingBuffer_IsEmpty(&tx_buff))
 2a4:	88 23       	and	r24, r24
 2a6:	c1 f0       	breq	.+48     	; 0x2d8 <main+0x1b4>
	*
	*  \return Next data element stored in the buffer
	*/
	static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
	{
		RingBuff_Data_t Data = *Buffer->Out;
 2a8:	db 01       	movw	r26, r22
 2aa:	8d 91       	ld	r24, X+
 2ac:	9c 91       	ld	r25, X
 2ae:	dc 01       	movw	r26, r24
 2b0:	4d 91       	ld	r20, X+
 2b2:	cd 01       	movw	r24, r26
		
		if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 2b4:	db 01       	movw	r26, r22
 2b6:	8d 93       	st	X+, r24
 2b8:	9c 93       	st	X, r25
 2ba:	89 50       	subi	r24, 0x09	; 9
 2bc:	92 40       	sbci	r25, 0x02	; 2
 2be:	19 f4       	brne	.+6      	; 0x2c6 <main+0x1a2>
		Buffer->Out = Buffer->Buffer;
 2c0:	db 01       	movw	r26, r22
 2c2:	ad 92       	st	X+, r10
 2c4:	bc 92       	st	X, r11

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2c6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2c8:	f8 94       	cli
		{
			Buffer->Count--;
 2ca:	d4 01       	movw	r26, r8
 2cc:	9c 91       	ld	r25, X
 2ce:	91 50       	subi	r25, 0x01	; 1
 2d0:	9c 93       	st	X, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2d2:	8f bf       	out	0x3f, r24	; 63
		UDR0 = (uint8_t)RingBuffer_Remove(&tx_buff);//(char)data;
 2d4:	d9 01       	movw	r26, r18
 2d6:	4c 93       	st	X, r20
	//if(!usart_available())
	return (uint8_t)RingBuffer_Remove(&rx_buff);
}

static inline void usart_puts(char *p){
	while(*p){
 2d8:	41 91       	ld	r20, Z+
 2da:	41 11       	cpse	r20, r1
 2dc:	c2 cf       	rjmp	.-124    	; 0x262 <main+0x13e>
	*
	*  \return Next data element stored in the buffer
	*/
	static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
	{
		RingBuff_Data_t Data = *Buffer->Out;
 2de:	0f 2e       	mov	r0, r31
 2e0:	fb e0       	ldi	r31, 0x0B	; 11
 2e2:	6f 2e       	mov	r6, r31
 2e4:	f2 e0       	ldi	r31, 0x02	; 2
 2e6:	7f 2e       	mov	r7, r31
 2e8:	f0 2d       	mov	r31, r0
	RingBuffer_Insert(&tx_buff, data);
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	if(!RingBuffer_IsEmpty(&tx_buff))
		UDR0 = (uint8_t)RingBuffer_Remove(&tx_buff);//(char)data;
 2ea:	0f 2e       	mov	r0, r31
 2ec:	f6 ec       	ldi	r31, 0xC6	; 198
 2ee:	4f 2e       	mov	r4, r31
 2f0:	51 2c       	mov	r5, r1
 2f2:	f0 2d       	mov	r31, r0
{
	usart_init(9600);

    while(1)
    {
       while(usart_available() > 0) 
 2f4:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_available>
 2f8:	88 23       	and	r24, r24
 2fa:	e1 f3       	breq	.-8      	; 0x2f4 <main+0x1d0>
 2fc:	5c cf       	rjmp	.-328    	; 0x1b6 <main+0x92>

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
